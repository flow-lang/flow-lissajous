{"version":3,"sources":["plugins/web-socket.js","plugins/index.js"],"names":["event","handler","eventName","__eventType","onopen","onerror","onmessage","onclose","effect","__effectType","run","url","protocols","send","data","$ws","close","__pluginType","__pluginName","__install","$dispatch","WebSocket","Object","keys","$events","forEach","addEventListener","e","__update","newEvents","map","filter","open","error","message"],"mappings":"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","file":"index.js","sourceRoot":"../src","sourcesContent":["/* global WebSocket */\nexport const event = (handler, eventName) => ({ __eventType: 'ws', eventName, handler })\n\nexport const onopen = handler => event(handler, 'open')\nexport const onerror = handler => event(handler, 'error')\nexport const onmessage = handler => event(handler, 'message')\nexport const onclose = handler => event(handler, 'close')\n\nexport const effect = handler => ({ __effectType: 'ws', run: handler })\n\nexport default ({ url, protocols = [] }) => {\n  return {\n    event,\n    onopen,\n    onerror,\n    onmessage,\n    onclose,\n    send (data) {\n      return effect(() => this.$ws.send(data))\n    },\n    close () {\n      return effect(() => this.$ws.close())\n    },\n    // Plugin data ===============================================================\n    // The runtime needs to know what type of plugin to install\n    __pluginType: 'event',\n    // In the future, __pluginName will be used to stop duplicate plugins being\n    // registered.\n    __pluginName: 'WebSocket',\n    // The event type should match the __eventType of any event objects you want\n    // this plugin to handle.\n    __eventType: 'ws',\n    // Install is called after a program has been started. It is always passed an\n    // object with $context, $root, and $dispatch but a plugin may choose to ignore\n    // any or all of these fields.\n    __install ({ $dispatch }) {\n      this.$ws = new WebSocket(url, protocols)\n      this.$dispatch = $dispatch\n\n      Object.keys(this.$events).forEach(event => {\n        this.$ws.addEventListener(event, e => {\n          this.$events[event].forEach(({ handler }) => {\n            handler(e)\n          })\n        })\n      })\n    },\n    // Update is called every time the model is updated, and it receives a filtered\n    // list of all the new event listeners. The list is filtered based on the\n    // __eventType defined above.\n    __update (newEvents) {\n      newEvents = newEvents.map(event => ({\n        ...event,\n        handler: e => this.$dispatch(event.handler(e))\n      }))\n\n      for (const event in this.$events) {\n        this.$events[event] = newEvents.filter(({ eventName }) =>\n          eventName === event\n        )\n      }\n    },\n    //\n    $dispatch: null,\n    $ws: null,\n    $events: {\n      open: [],\n      error: [],\n      message: [],\n      close: []\n    }\n  }\n}\n","export { default as WebSockets } from './web-socket'\n"]}