{"version":3,"sources":["audio/event.js"],"names":["event","type","id","time","handler","__eventType","every","at","__pluginType","__pluginName","__install","$context","$dispatch","__update","newEvents","oldEvents","Object","keys","$events","i","Math","max","length","newEvent","oldEvent","update","Event","stop","interval","lookahead","start","targetTime","currentTime","timerID","setInterval","diff","clearInterval"],"mappings":"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","file":"event.js","sourceRoot":"../src","sourcesContent":["export const event = (type, id, time, handler) => ({ __eventType: 'audio', type, id, time, handler })\n\nexport const every = (id, time, handler) => event('repeat', id, time, handler)\nexport const at = (id, time, handler) => event('once', id, time, handler)\n\nexport default {\n  // Core ======================================================================\n  every,\n  at,\n  // Plugin data ===============================================================\n  // The runtime needs to know what type of plugin to install\n  __pluginType: 'event',\n  // In the future, __pluginName will be used to stop duplicate plugins being\n  // registered.\n  __pluginName: 'Audio.Event',\n  // The event type should match the __eventType of any event objects you want\n  // this plugin to handle.\n  __eventType: 'audio',\n  // Install is called after a program has been started. It is always passed an\n  // object with $context, $root, and $dispatch but a plugin may choose to ignore\n  // any or all of these fields.\n  __install ({ $context, $dispatch }) {\n    this.$context = $context\n    this.$dispatch = $dispatch\n  },\n  // Update is called every time the model is updated, and it receives a filtered\n  // list of all the new event listeners. The list is filtered based on the\n  // __eventType defined above.\n  __update (newEvents) {\n    const oldEvents = Object.keys(this.$events)\n\n    for (let i = 0; i < Math.max(oldEvents.length, newEvents.length); i++) {\n      const newEvent = newEvents[i]\n      const oldEvent = oldEvents[i]\n\n      if (newEvent) {\n        if (this.$events[newEvent.id]) {\n          this.$events[newEvent.id].update(newEvent)\n        } else {\n          this.$events[newEvent.id] = new Event(newEvent, this.$dispatch, this.$context)\n        }\n      } else {\n        this.$events[oldEvent].stop()\n\n        delete this.$events[oldEvent]\n      }\n    }\n  },\n  //\n  $context: null,\n  $dispatch: null,\n  $events: {}\n}\n\n//\nclass Event {\n  constructor ({ type, time, handler }, $dispatch, $context) {\n    this.type = type\n    this.time = time\n    this.handler = handler\n\n    this.interval = 25 // ms\n    this.lookahead = 0.1 // seconds\n\n    this.start($dispatch, $context)\n  }\n\n  start ($dispatch, $context) {\n    this.targetTime = $context.currentTime + this.time\n\n    if (this.type === 'repeat') $dispatch(this.handler($context.currentTime))\n\n    this.timerID = setInterval(() => {\n      const currentTime = $context.currentTime\n\n      if (currentTime >= this.targetTime - this.lookahead) {\n        const diff = this.targetTime - currentTime\n\n        $dispatch(this.handler(currentTime + diff))\n\n        switch (this.type) {\n          case 'repeat':\n            this.targetTime = currentTime + diff + this.time\n            break\n          case 'once':\n            this.stop()\n        }\n      }\n    }, 25)\n  }\n\n  update ({ time, handler }) {\n    if (time) this.time = time\n    if (handler) this.handler = handler\n  }\n\n  stop () {\n    clearInterval(this.timerID)\n  }\n}\n"]}