{"version":3,"sources":["audio/node.js"],"names":["node","type","properties","connections","ref","key","audioBufferSource","audioDestination","audioScheduledSource","biquadFilter","channelMerger","channelSplitter","constantSource","convolver","delay","dynamicsCompressor","gain","iirFilter","oscillator","panner","stereoPanner","waveShaper","compressor","dac","filter","num","osc"],"mappings":"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","file":"node.js","sourceRoot":"../src","sourcesContent":["export const node = (type, properties = [], connections = []) => ({ type, properties, connections })\nexport const ref = key => ({ type: 'RefNode', key })\n\n// export const analyser = (properties, connections) => node('AnalyserNode', properties, connections)\nexport const audioBufferSource = (properties, connections) => node('AudioBufferSourceNode', properties, connections)\nexport const audioDestination = () => node('AudioDestinationNode')\nexport const audioScheduledSource = (properties, connections) => node('AudioScheduledSourceNode', properties, connections)\nexport const biquadFilter = (properties, connections) => node('BiquadFilterNode', properties, connections)\nexport const channelMerger = (properties, connections) => node('ChannelMergerNode', properties, connections)\nexport const channelSplitter = (properties, connections) => node('ChannelSplitterNode', properties, connections)\nexport const constantSource = (properties, connections) => node('ConstantSourceNode', properties, connections)\nexport const convolver = (properties, connections) => node('ConvolverNode', properties, connections)\nexport const delay = (properties, connections) => node('DelayNode', properties, connections)\nexport const dynamicsCompressor = (properties, connections) => node('DynamicsCompressorNode', properties, connections)\nexport const gain = (properties, connections) => node('GainNode', properties, connections)\nexport const iirFilter = (properties, connections) => node('IIRFilterNode', properties, connections)\n// export const mediaElementAudioSource = (properties, connections) => node('MediaElementAudioSourceNode', properties, connections)\n// export const mediaStreamAudioDestination = (properties, connections) => node('MediaStreamAudioDestinationNode', properties, connections)\n// export const mediaStreamAudioSource = (properties, connections) => node('MediaStreamAudioSourceNode', properties, connections)\nexport const oscillator = (properties, connections) => node('OscillatorNode', properties, connections)\nexport const panner = (properties, connections) => node('PannerNode', properties, connections)\nexport const stereoPanner = (properties, connections) => node('StereoPannerNode', properties, connections)\nexport const waveShaper = (properties, connections) => node('WaveShaperNode', properties, connections)\n\nexport const compressor = dynamicsCompressor\nexport const dac = audioDestination\nexport const filter = biquadFilter\nexport const num = constantSource\nexport const osc = oscillator\n\nexport default {\n  // Core\n  node,\n  ref,\n  // Web Audio nodes\n  // analyser,\n  audioBufferSource,\n  audioDestination,\n  audioScheduledSource,\n  biquadFilter,\n  channelMerger,\n  channelSplitter,\n  constantSource,\n  convolver,\n  delay,\n  dynamicsCompressor,\n  gain,\n  iirFilter,\n  // mediaElementAudioSource,\n  // mediaStreamAudioDestination,\n  // mediaStreamAudioSource,\n  oscillator,\n  panner,\n  stereoPanner,\n  waveShaper,\n  // Aliases\n  compressor,\n  dac,\n  filter,\n  num,\n  osc\n}\n"]}