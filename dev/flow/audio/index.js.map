{"version":3,"sources":["audio/node.js","audio/keyed.js","audio/property.js","audio/event.js","audio/index.js"],"names":["node","type","properties","connections","ref","key","audioBufferSource","audioDestination","audioScheduledSource","biquadFilter","channelMerger","channelSplitter","constantSource","convolver","delay","dynamicsCompressor","gain","iirFilter","oscillator","panner","stereoPanner","waveShaper","compressor","dac","filter","num","osc","keyed","analyser","mediaElementAudioSource","mediaStreamAudioDestination","mediaStreamAudioSource","property","label","value","scheduledProperty","method","prop","time","target","setValueAtTime","linearRampToValueAtTime","exponentialRampToValueAtTime","setValuesAtTime","valuesAndTimes","map","linearRampToValuesAtTime","exponentialRampToValuesAtTime","attack","coneInnerAngle","coneOuterAngle","coneOuterGain","curve","delayTime","detune","distanceModel","feedback","feedforward","fftSize","frequency","frequencyBinCount","gainAmount","knee","loop","loopEnd","loopStart","maxChannelCount","maxDecibels","maxDelayTime","maxDistance","mediaElement","mediaStream","minDecibels","normalize","offset","orientationX","orientationY","orientationZ","oversample","pan","panningModel","playbackRate","positionX","positionY","positionZ","q","ratio","reduction","refDistance","release","rolloffFactor","smoothingTimeConstant","stream","threshold","event","id","handler","__eventType","every","at","__pluginType","__pluginName","__install","$context","$dispatch","__update","newEvents","oldEvents","Object","keys","$events","i","Math","max","length","newEvent","oldEvent","update","Event","stop","interval","lookahead","start","targetTime","currentTime","timerID","setInterval","diff","clearInterval"],"mappings":"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","file":"index.js","sourceRoot":"../src","sourcesContent":["export const node = (type, properties = [], connections = []) => ({ type, properties, connections })\nexport const ref = key => ({ type: 'RefNode', key })\n\n// export const analyser = (properties, connections) => node('AnalyserNode', properties, connections)\nexport const audioBufferSource = (properties, connections) => node('AudioBufferSourceNode', properties, connections)\nexport const audioDestination = () => node('AudioDestinationNode')\nexport const audioScheduledSource = (properties, connections) => node('AudioScheduledSourceNode', properties, connections)\nexport const biquadFilter = (properties, connections) => node('BiquadFilterNode', properties, connections)\nexport const channelMerger = (properties, connections) => node('ChannelMergerNode', properties, connections)\nexport const channelSplitter = (properties, connections) => node('ChannelSplitterNode', properties, connections)\nexport const constantSource = (properties, connections) => node('ConstantSourceNode', properties, connections)\nexport const convolver = (properties, connections) => node('ConvolverNode', properties, connections)\nexport const delay = (properties, connections) => node('DelayNode', properties, connections)\nexport const dynamicsCompressor = (properties, connections) => node('DynamicsCompressorNode', properties, connections)\nexport const gain = (properties, connections) => node('GainNode', properties, connections)\nexport const iirFilter = (properties, connections) => node('IIRFilterNode', properties, connections)\n// export const mediaElementAudioSource = (properties, connections) => node('MediaElementAudioSourceNode', properties, connections)\n// export const mediaStreamAudioDestination = (properties, connections) => node('MediaStreamAudioDestinationNode', properties, connections)\n// export const mediaStreamAudioSource = (properties, connections) => node('MediaStreamAudioSourceNode', properties, connections)\nexport const oscillator = (properties, connections) => node('OscillatorNode', properties, connections)\nexport const panner = (properties, connections) => node('PannerNode', properties, connections)\nexport const stereoPanner = (properties, connections) => node('StereoPannerNode', properties, connections)\nexport const waveShaper = (properties, connections) => node('WaveShaperNode', properties, connections)\n\nexport const compressor = dynamicsCompressor\nexport const dac = audioDestination\nexport const filter = biquadFilter\nexport const num = constantSource\nexport const osc = oscillator\n\nexport default {\n  // Core\n  node,\n  ref,\n  // Web Audio nodes\n  // analyser,\n  audioBufferSource,\n  audioDestination,\n  audioScheduledSource,\n  biquadFilter,\n  channelMerger,\n  channelSplitter,\n  constantSource,\n  convolver,\n  delay,\n  dynamicsCompressor,\n  gain,\n  iirFilter,\n  // mediaElementAudioSource,\n  // mediaStreamAudioDestination,\n  // mediaStreamAudioSource,\n  oscillator,\n  panner,\n  stereoPanner,\n  waveShaper,\n  // Aliases\n  compressor,\n  dac,\n  filter,\n  num,\n  osc\n}\n","import { node } from './node'\n\nexport const keyed = (key, type, properties = [], connections = []) => ({ key, ...node(type, properties, connections) })\nexport const key = (key, node) => ({ key, ...node })\n\nexport const analyser = (key, properties, connections) => keyed(key, 'AnalyserNode', properties, connections)\nexport const audioBufferSource = (key, properties, connections) => keyed(key, 'AudioBufferSourceNode', properties, connections)\nexport const audioScheduledSource = (key, properties, connections) => keyed(key, 'AudioScheduledSourceNode', properties, connections)\nexport const biquadFilter = (key, properties, connections) => keyed(key, 'BiquadFilterNode', properties, connections)\nexport const channelMerger = (key, properties, connections) => keyed(key, 'ChannelMergerNode', properties, connections)\nexport const channelSplitter = (key, properties, connections) => keyed(key, 'ChannelSplitterNode', properties, connections)\nexport const constantSource = (key, properties, connections) => keyed(key, 'ConstantSourceNode', properties, connections)\nexport const convolver = (key, properties, connections) => keyed(key, 'ConvolverNode', properties, connections)\nexport const delay = (key, properties, connections) => keyed(key, 'DelayNode', properties, connections)\nexport const dynamicsCompressor = (key, properties, connections) => keyed(key, 'DynamicsCompressorNode', properties, connections)\nexport const gain = (key, properties, connections) => keyed(key, 'GainNode', properties, connections)\nexport const iirFilter = (key, properties, connections) => keyed(key, 'IIRFilterNode', properties, connections)\nexport const mediaElementAudioSource = (key, properties, connections) => keyed(key, 'MediaElementAudioSourceNode', properties, connections)\nexport const mediaStreamAudioDestination = (key, properties, connections) => keyed(key, 'MediaStreamAudioDestinationNode', properties, connections)\nexport const mediaStreamAudioSource = (key, properties, connections) => keyed(key, 'MediaStreamAudioSourceNode', properties, connections)\nexport const oscillator = (key, properties, connections) => keyed(key, 'OscillatorNode', properties, connections)\nexport const panner = (key, properties, connections) => keyed(key, 'PannerNode', properties, connections)\nexport const stereoPanner = (key, properties, connections) => keyed(key, 'StereoPannerNode', properties, connections)\nexport const waveShaper = (key, properties, connections) => keyed(key, 'WaveShaperNode', properties, connections)\n\nexport const compressor = dynamicsCompressor\nexport const filter = biquadFilter\nexport const num = constantSource\nexport const osc = oscillator\n\nexport default {\n  // Core\n  keyed,\n  key,\n  // Keyed Web Audio nodes\n  analyser,\n  audioBufferSource,\n  audioScheduledSource,\n  biquadFilter,\n  channelMerger,\n  channelSplitter,\n  constantSource,\n  convolver,\n  delay,\n  dynamicsCompressor,\n  gain,\n  iirFilter,\n  mediaElementAudioSource,\n  mediaStreamAudioDestination,\n  mediaStreamAudioSource,\n  oscillator,\n  panner,\n  stereoPanner,\n  waveShaper,\n  // Aliases\n  compressor,\n  filter,\n  num,\n  osc\n}\n","export const property = (type, label, value) => ({ type, label, value })\nexport const scheduledProperty = (method, prop, time) => property('ScheduledAudioParam', prop.label, { method, target: prop.value, time })\n\nexport const setValueAtTime = (property, time) => scheduledProperty('setValueAtTime', property, time)\nexport const linearRampToValueAtTime = (property, time) => scheduledProperty('linearRampToValueAtTime', property, time)\nexport const exponentialRampToValueAtTime = (property, time) => scheduledProperty('exponentialRampToValueAtTime', property, time)\n\nexport const setValuesAtTime = (property, valuesAndTimes) => valuesAndTimes.map(([ value, time ]) => setValueAtTime(property(value), time))\nexport const linearRampToValuesAtTime = (property, valuesAndTimes) => valuesAndTimes.map(([ value, time ]) => linearRampToValueAtTime(property(value), time))\nexport const exponentialRampToValuesAtTime = (property, valuesAndTimes) => valuesAndTimes.map(([ value, time ]) => exponentialRampToValueAtTime(property(value), time))\n\nexport const attack = value => property('AudioParam', 'attack', value)\nexport const coneInnerAngle = value => property('NodeProperty', 'coneInnerAngle', value)\nexport const coneOuterAngle = value => property('NodeProperty', 'coneOuterAngle', value)\nexport const coneOuterGain = value => property('NodeProperty', 'coneOuterGain', value)\nexport const curve = value => property('NodeProperty', 'curve', value)\nexport const delayTime = value => property('AudioParam', 'delayTime', value)\nexport const detune = value => property('AudioParam', 'detune', value)\nexport const distanceModel = value => property('NodeProperty', 'distanceModel', value)\nexport const feedback = value => property('ConstructorProperty', 'feedback', value)\nexport const feedforward = value => property('ConstructorProperty', 'feedforward', value)\nexport const fftSize = value => property('NodeProperty', 'fftSize', value)\nexport const frequency = value => property('AudioParam', 'frequency', value)\nexport const frequencyBinCount = value => property('NodeProperty', 'frequencyBinCount', value)\nexport const gain = value => property('AudioParam', 'gain', value)\nexport const gainAmount = gain\nexport const knee = value => property('AudioParam', 'knee', value)\nexport const loop = value => property('NodeProperty', 'loop', value)\nexport const loopEnd = value => property('NodeProperty', 'loopEnd', value)\nexport const loopStart = value => property('NodeProperty', 'loopStart', value)\nexport const maxChannelCount = value => property('NodeProperty', 'maxChannelCount', value)\nexport const maxDecibels = value => property('NodeProperty', 'maxDecibels', value)\nexport const maxDelayTime = value => property('ConstructorProperty', 'maxDelayTime', value)\nexport const maxDistance = value => property('NodeProperty', 'maxDistance', value)\nexport const mediaElement = value => property('ConstructorProperty', 'mediaElement', value)\nexport const mediaStream = value => property('ConstructorProperty', 'mediaStream', value)\nexport const minDecibels = value => property('NodeProperty', 'minDecibels', value)\nexport const normalize = value => property('NodeProperty', 'normalize', value)\nexport const offset = value => property('AudioParam', 'offset', value)\nexport const orientationX = value => property('AudioParam', 'orientationX', value)\nexport const orientationY = value => property('AudioParam', 'orientationY', value)\nexport const orientationZ = value => property('AudioParam', 'orientationZ', value)\nexport const oversample = value => property('NodeProperty', 'oversample', value)\nexport const pan = value => property('AudioParam', 'pan', value)\nexport const panningModel = value => property('NodeProperty', 'panningModel', value)\nexport const playbackRate = value => property('AudioParam', 'playbackRate', value)\nexport const positionX = value => property('AudioParam', 'positionX', value)\nexport const positionY = value => property('AudioParam', 'positionY', value)\nexport const positionZ = value => property('AudioParam', 'positionZ', value)\nexport const q = value => property('AudioParam', 'Q', value)\nexport const ratio = value => property('AudioParam', 'ratio', value)\nexport const reduction = value => property('AudioParam', 'reduction', value)\nexport const refDistance = value => property('NodeProperty', 'refDistance', value)\nexport const release = value => property('AudioParam', 'release', value)\nexport const rolloffFactor = value => property('NodeProperty', 'rolloffFactor', value)\nexport const smoothingTimeConstant = value => property('NodeProperty', 'smoothingTimeConstant', value)\nexport const stream = value => property('MediaStream', 'stream', value)\nexport const threshold = value => property('AudioParam', 'threshold', value)\nexport const type = value => property('NodeProperty', 'type', value)\n\nexport default {\n  // Core\n  property,\n  scheduledProperty,\n  // Scheduled properties\n  setValueAtTime,\n  linearRampToValueAtTime,\n  exponentialRampToValueAtTime,\n  setValuesAtTime,\n  linearRampToValuesAtTime,\n  exponentialRampToValuesAtTime,\n  // Web Audio properties\n  attack,\n  coneInnerAngle,\n  coneOuterAngle,\n  coneOuterGain,\n  curve,\n  delayTime,\n  detune,\n  distanceModel,\n  feedback,\n  feedforward,\n  fftSize,\n  frequency,\n  frequencyBinCount,\n  gain,\n  gainAmount,\n  knee,\n  loop,\n  loopEnd,\n  loopStart,\n  maxChannelCount,\n  maxDecibels,\n  maxDelayTime,\n  maxDistance,\n  mediaElement,\n  mediaStream,\n  minDecibels,\n  normalize,\n  offset,\n  orientationX,\n  orientationY,\n  orientationZ,\n  oversample,\n  pan,\n  panningModel,\n  playbackRate,\n  positionX,\n  positionY,\n  positionZ,\n  q,\n  ratio,\n  reduction,\n  refDistance,\n  release,\n  rolloffFactor,\n  smoothingTimeConstant,\n  stream,\n  threshold,\n  type\n}\n","export const event = (type, id, time, handler) => ({ __eventType: 'audio', type, id, time, handler })\n\nexport const every = (id, time, handler) => event('repeat', id, time, handler)\nexport const at = (id, time, handler) => event('once', id, time, handler)\n\nexport default {\n  // Core ======================================================================\n  every,\n  at,\n  // Plugin data ===============================================================\n  // The runtime needs to know what type of plugin to install\n  __pluginType: 'event',\n  // In the future, __pluginName will be used to stop duplicate plugins being\n  // registered.\n  __pluginName: 'Audio.Event',\n  // The event type should match the __eventType of any event objects you want\n  // this plugin to handle.\n  __eventType: 'audio',\n  // Install is called after a program has been started. It is always passed an\n  // object with $context, $root, and $dispatch but a plugin may choose to ignore\n  // any or all of these fields.\n  __install ({ $context, $dispatch }) {\n    this.$context = $context\n    this.$dispatch = $dispatch\n  },\n  // Update is called every time the model is updated, and it receives a filtered\n  // list of all the new event listeners. The list is filtered based on the\n  // __eventType defined above.\n  __update (newEvents) {\n    const oldEvents = Object.keys(this.$events)\n\n    for (let i = 0; i < Math.max(oldEvents.length, newEvents.length); i++) {\n      const newEvent = newEvents[i]\n      const oldEvent = oldEvents[i]\n\n      if (newEvent) {\n        if (this.$events[newEvent.id]) {\n          this.$events[newEvent.id].update(newEvent)\n        } else {\n          this.$events[newEvent.id] = new Event(newEvent, this.$dispatch, this.$context)\n        }\n      } else {\n        this.$events[oldEvent].stop()\n\n        delete this.$events[oldEvent]\n      }\n    }\n  },\n  //\n  $context: null,\n  $dispatch: null,\n  $events: {}\n}\n\n//\nclass Event {\n  constructor ({ type, time, handler }, $dispatch, $context) {\n    this.type = type\n    this.time = time\n    this.handler = handler\n\n    this.interval = 25 // ms\n    this.lookahead = 0.1 // seconds\n\n    this.start($dispatch, $context)\n  }\n\n  start ($dispatch, $context) {\n    this.targetTime = $context.currentTime + this.time\n\n    if (this.type === 'repeat') $dispatch(this.handler($context.currentTime))\n\n    this.timerID = setInterval(() => {\n      const currentTime = $context.currentTime\n\n      if (currentTime >= this.targetTime - this.lookahead) {\n        const diff = this.targetTime - currentTime\n\n        $dispatch(this.handler(currentTime + diff))\n\n        switch (this.type) {\n          case 'repeat':\n            this.targetTime = currentTime + diff + this.time\n            break\n          case 'once':\n            this.stop()\n        }\n      }\n    }, 25)\n  }\n\n  update ({ time, handler }) {\n    if (time) this.time = time\n    if (handler) this.handler = handler\n  }\n\n  stop () {\n    clearInterval(this.timerID)\n  }\n}\n","export { default as Node } from './node'\nexport { default as Keyed } from './keyed'\nexport { default as Property } from './property'\nexport { default as Event } from './event'\n"]}